<?php

define('PLAYBOX_ADMIN_BATCH_LIMIT', '5'); 

/**
 * @file
 * Code for the Playbox Global Settings module.
 */

/*
 * Implements hook_init()
 */
function playbox_admin_init() {
  // Load color & disco information and expose to JavaScript, which handles the actual color changing
  // See Disco Party Time! in custom.js
  global $user;
  $user = user_load($user->uid);  
  $playbox_admin_color = _get_field($user->field_color);
  if(empty($playbox_admin_color)) $playbox_admin_color = variable_get('playbox_admin_color');
  $colors = _playbox_admin_get_colors();
  
  $playbox_admin_disco = _get_field($user->field_disco);
  if(empty($playbox_admin_disco)) $playbox_admin_disco = variable_get('playbox_admin_disco');

  //Add site color.  If disco mode is enabled then custom.js in playbox_theme will change colors periodically
  $css_path = drupal_get_path('module', 'playbox_admin') . '/css/';
  drupal_add_css(drupal_get_path('module', 'playbox_admin') . '/css/'.$playbox_admin_color.'.css');

  $data = array(
    'playboxadmin' => array(
      'colors' => $colors,
      'disco' => $playbox_admin_disco,
      'path' => $css_path,
      'default_color' => $playbox_admin_color
    )
  );
  drupal_add_js($data, 'setting');
}

/*
 * Implements hook_menu()
 */
function playbox_admin_menu() {
  $items['admin/config/playbox'] = array(
    'title' => 'Playbox',
    'position' => 'left',
    'weight' => 200,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/playbox/global-settings'] = array(
    'title' => 'Global Settings',
    'description' => t('Configure global settings for Playbox'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('playbox_admin_form'),
    'access arguments' => array('administer playbox global settings'),
  );
  
  $items['admin/config/playbox/user-settings'] = array(
    'title' => 'User Settings',
    'description' => t('Configure user settings for Playbox'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('playbox_user_form'),
    'access arguments' => array('change user playbox settings'),
    'access callback' => TRUE,
  );
  
  $items['admin/config/playbox/battle-management'] = array(
    'title' => 'Battle Management',
    'description' => t('Display, manage and reset published battles'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('playbox_battle_management_form'),  
    'access arguments' => array('administer playbox battles'),
  );  

  return $items;
}

/*
 * Implements hook_views_default_views_alter()
 */
function playbox_admin_views_pre_view(&$view) {

  if ($view->name == 'playbox_presidents' || $view->name == 'playbox_robots') {
    //Get information about the current user on their favorite president and robot
    global $user;
    $user = user_load($user->uid);
    
    $playbox_fav_president = _get_field($user->field_favorite_president, array('return' => 'target_id'));
    if(empty($playbox_fav_president)){
      //use default favorite president
      $playbox_fav_president_var = variable_get('playbox_admin_president');
      if(!empty($playbox_fav_president_var)){
        $playbox_fav_president = $playbox_fav_president_var['entity_id'];
      }
    }
    $playbox_admin_president_nid = $playbox_fav_president;
    
    $playbox_fav_robot = _get_field($user->field_favorite_robot, array('return' => 'target_id'));
    if(empty($playbox_fav_robot)){
      //use default favorite robot
      $playbox_fav_robot_var = variable_get('playbox_admin_boss');
      if(!empty($playbox_fav_robot_var)){
        $playbox_fav_robot = $playbox_fav_robot_var['entity_id'];
      }
    }
    $playbox_admin_boss_nid = $playbox_fav_robot;

    //Filter views using favorite president and robot
    //Used on the top section of the presidents and robots pages
    if ($view->name == 'playbox_presidents') {
      if (!empty($playbox_admin_president_nid)) {
        /* Filter criterion: Content: Nid */
        $view->display['playbox_president_header_1']->handler->options['filters']['nid']['id'] = 'nid';
        $view->display['playbox_president_header_1']->handler->options['filters']['nid']['table'] = 'node';
        $view->display['playbox_president_header_1']->handler->options['filters']['nid']['field'] = 'nid';
        $view->display['playbox_president_header_1']->handler->options['filters']['nid']['value']['value'] = $playbox_admin_president_nid;
      }
    }
    if ($view->name == 'playbox_robots') {
      if (!empty($playbox_admin_boss_nid)) {
        /* Filter criterion: Content: Nid */
        $view->display['playbox_robot_header_1']->handler->options['filters']['nid']['id'] = 'nid';
        $view->display['playbox_robot_header_1']->handler->options['filters']['nid']['table'] = 'node';
        $view->display['playbox_robot_header_1']->handler->options['filters']['nid']['field'] = 'nid';
        $view->display['playbox_robot_header_1']->handler->options['filters']['nid']['value']['value'] = $playbox_admin_boss_nid;
      }
    }
  }
}

/*
 * Implements hook_permission()
 */
function playbox_admin_permission() {
  return array(
    'administer playbox global settings' => array(
      'title' => t('Administer Playbox Global Settings'),
      'description' => t('Perform administration tasks for Playbox Global Settings'),
    ),
    'change user playbox settings' => array(
      'title' => t('Change User Playbox Settings'),
      'description' => t('Change settings for Playbox User Settings'),
    ),
    'administer playbox battles' => array(
      'title' => t('Access the Playbox Battle Management page'),
      'description' => t('Administer battles and reset/randomize existing battles'),
    )
  );
}

/*
 * Implements hook_form_FORM_ID_alter()
 */
function playbox_admin_form_playbox_admin_form_alter(&$form, &$form_state, $form_id) {
  $form['playbox_admin_color']['#empty_option'] = t('Choose a color');
  $form['#submit'][] = 'playbox_admin_submit';
  $form['playbox_global_settings']['playbox_admin_president']['#attributes']['class'][] = 'form-control';
  $form['playbox_global_settings']['playbox_admin_boss']['#attributes']['class'][] = 'form-control';
}

/*
 * Helper function to return our colorz
 */
function _playbox_admin_get_colors() {
  $colors = array (
    'crimson' => 'crimson',
    'tangerine' => 'tangerine',
    'ochre' => 'ochre',
    'jade' => 'jade',
    'cerulean' => 'cerulean',
    'lavender' => 'lavender',
    'onyx' => 'onyx',
    'eggshell' => 'eggshell',
  );
  return $colors;
}

/*
 * Playbox admin form definition
 */
function playbox_admin_form($form, &$form_state) {
  $form['playbox_global_settings'] = array (
    '#type' => 'fieldset',
    '#title' => 'Change Playbox Settings',
    );

  $form['playbox_global_settings']['playbox_admin_president'] = array(
    '#type' => 'entityreference',
    '#title' => t('Who is your favorite president?'),
    '#era_entity_type' => 'node',
    '#era_bundles' => array('playbox_president'),
    '#era_cardinality' => 1,
    '#era_query_settings' => array(
      'limit' => 15,
      ),
    '#default_value' => variable_get('playbox_admin_president')
  );


  $form['playbox_global_settings']['playbox_admin_boss'] = array(
    '#type' => 'entityreference',
    '#title' => t('Who is your favorite boss?'),
    '#era_entity_type' => 'node',
    '#era_bundles' => array('playbox_robot'),
    '#era_cardinality' => 1,
    '#era_query_settings' => array(
      'limit' => 15,
    ),
    '#default_value' => variable_get('playbox_admin_boss'),
  );

  $form['playbox_global_settings']['playbox_admin_color'] = array(
    '#type' => 'select',
    '#title' => t('What is your favorite color?'),
    '#options' => _playbox_admin_get_colors(),
    '#empty_option' => 'Select a color',
    '#default_value' => variable_get('playbox_admin_color'),
    '#states' => array(
      // Hide the color select when disco mode is checked.
      'disabled' => array(
        ':input[name="playbox_admin_disco"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['playbox_global_settings']['playbox_admin_disco'] = array(
    '#type' => 'checkbox',
    '#title' => t('Put site into Disco Mode?'),
    '#default_value' => variable_get('playbox_admin_disco'),
  );

  $form = system_settings_form($form);
  return $form;
}

/*
 * Clears the theme cache when settings are changes
 */
function playbox_admin_submit($form, &$form_state) {
  if (variable_get('cache', 0)) {
    drupal_theme_rebuild();
  }
}

/*
 * Playbox admin form definition
 */
function playbox_user_form($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  $user = user_load($uid);
  #dpm($user);
  
  $default = _get_field($user->field_favorite_president, array('return' => 'target_id'));
  if(empty($default)) $default = variable_get('playbox_admin_president');
  
  $form['field_favorite_president'] = array(
    '#type' => 'entityreference',
    '#title' => t('Who is your favorite president?'),
    '#era_entity_type' => 'node',
    '#era_bundles' => array('playbox_president'),
    '#era_cardinality' => 1,
    '#era_query_settings' => array(
      'limit' => 15,
      ),
    '#default_value' => $default
  );

  $default = _get_field($user->field_favorite_robot, array('return' => 'target_id'));
  if(empty($default)) $default = variable_get('playbox_admin_boss');
  
  $form['field_favorite_robot'] = array(
    '#type' => 'entityreference',
    '#title' => t('Who is your favorite robot?'),
    '#era_entity_type' => 'node',
    '#era_bundles' => array('playbox_robot'),
    '#era_cardinality' => 1,
    '#era_query_settings' => array(
      'limit' => 15,
    ),
    '#default_value' => $default,
  );

  $default = _get_field($user->field_color);
  if(empty($default)) $default = variable_get('playbox_admin_color');
  
  $form['field_color'] = array(
    '#type' => 'select',
    '#title' => t('What is your favorite color?'),
    '#options' => _playbox_admin_get_colors(),
    '#empty_option' => 'Select a color',
    '#default_value' => $default,
    '#states' => array(
      // Hide the color select when disco mode is checked.
      'disabled' => array(
        ':input[name="field_disco"]' => array('checked' => TRUE),
      ),
    ),
  );

  $default = _get_field($user->field_disco);
  if(empty($default)) $default = variable_get('playbox_admin_disco');
  
  $form['field_disco'] = array(
    '#type' => 'checkbox',
    '#title' => t('Put site into Disco Mode?'),
    '#default_value' => $default,
  );

  $form = system_settings_form($form);
  return $form;
}

/*
 * Implements hook_form_FORM_ID_alter()
 */
function playbox_admin_form_playbox_user_form_alter(&$form, &$form_state, $form_id) {
  $form['field_color']['#empty_option'] = t('Choose a color');
  $form['#submit'][] = 'playbox_user_submit';
  $form['field_favorite_president']['#attributes']['class'][] = 'form-control';
  $form['field_favorite_robot']['#attributes']['class'][] = 'form-control';
}

/*
 * On submit of playbox_user form
 * Saves form data into user entity
 * Clears the theme cache when settings are changes
 */
function playbox_user_submit($form, &$form_state) {
  
  global $user;
  #dpm($form);
  #dpm($user);

  //make edits to user
  $text = $form['field_favorite_president']['#value'];
  preg_match('#\((.*?)\)#', $text, $match);
  $president = $match[1];
  
  $text = $form['field_favorite_robot']['#value'];
  preg_match('#\((.*?)\)#', $text, $match);
  $robot = $match[1];
  
  $edit = array(
    'field_favorite_president' => array(
      LANGUAGE_NONE => array(
        0 => array(
          'target_id' => $president,
        ),
      ),
    ),
    'field_favorite_robot' => array(
      LANGUAGE_NONE => array(
        0 => array(
          'target_id' => $robot,
        ),
      ),
    ),
    'field_color' => array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => $form['field_color']['#value'],
        ),
      ),
    ),
    'field_disco' => array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => $form['field_disco']['#value'],
        ),
      ),
    ),
    
  );
  
  user_save($user, $edit);
}


/*
 * Custom print field function which can return the value for a single value field without markup
 * Does not work with multivalued fields
 */
function _get_field($field, $options = array()){
	$default_options = array(
		'lang' => 'en'//desired language defaults to 'en' then LANGUAGE_NONE
		,'return' => 'value'//return value, can specify others such as 'uri'
	);
	$options = array_merge($default_options, $options);
	$return = '';

	//if field is just a string value, use that
	if(is_string($field)){
		$return = $field;
	}

	//check if field is even valid
	elseif(is_array($field)){
		//check if field doesnt even have a language
		if(!empty($field[0])){
			if(!empty($field[0]['raw'])){
				$return = $field[0]['raw'][$options['return']];
			}else{
				$return = $field[0][$options['return']];
			}
		}
		//check if prefered language is available
		elseif(!empty($field[$options['lang']])){
			if(!empty($field[$options['lang']]['raw'])){
				$return = $field[$options['lang']]['raw'][$options['return']];
			}else{
				$return = $field[$options['lang']][0][$options['return']];
			}
		}
		//else default to LANGUAGE_NONE value
		else{
			//added just to handle field collections or data pulls with different langs than their parent. May screw things up
			if(!empty($field['en'])) $field[LANGUAGE_NONE] = $field['en'];
			if(!empty($field['spa'])) $field[LANGUAGE_NONE] = $field['spa'];


			if(!empty($field[LANGUAGE_NONE])){


				if(!empty($field[LANGUAGE_NONE]['raw'])){
					$return = $field[LANGUAGE_NONE][0]['raw'][$options['return']];
				}else{
					$return = $field[LANGUAGE_NONE][0][$options['return']];
				}
			}
		}
	}

	return $return;
}

/**
 * Playbox Battle Management form
 * Renders the reset button and list of 
 * existing battles in a form
 */ 
function playbox_battle_management_form($form, &$form_state) {    
  // Be extra safe! Only add the reset button if the user can create content
  if(user_access('create playbox_battle content')){
    // Add confirmation warning message js
    drupal_add_js('(function($){ $(function(){$("#btn-reset").click(function(){return confirm("Seriously, you want to RESET ALL BATTLES and RANDOMIZE ALL VOTES??!")});}); })(jQuery);', array('type' => 'inline'));    
    // Add reset & randomize! button
    $form['battle_reset'] = array(
      '#type' => 'submit',
      '#value' => t(''),
      '#attributes' => array('id' => 'btn-reset'),
      '#submit' => array('playbox_battles_reset'),
    );
  }
  // Add markup for related admin links
  $links_markup = _playbox_battles_links();
  $form['battle_links'] = array(
    '#markup' => $links_markup,
  );
  // Add markup for list of published battles
  $battles_markup = _playbox_battles_list();
  $form['battle_list'] = array(
    '#markup' => $battles_markup,
  );
  
  return $form;
}

/**
 * Get list of nodes and then use BatchAPI to call reset
 * and randomize process
 */ 
function playbox_battles_reset() {
  // Use EFQ to get nids for published battles
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'playbox_battle')
    ->propertyCondition('status', 1);

  $result = $query->execute();
  
  // run batch process if we have some nids
  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);  
    $batch = array(
      'operations' => array(
        array('batch_battle_reset_process', array($nids)),
        ),
      'finished' => 'batch_battle_reset_finished',
      'title' => t('Resetting battles and randomizing votes'),
      'init_message' => t('The batch reset and randomization of all published battles begins now...'),
      'progress_message' => t('Processed @current out of @total'),
      'error_message' => t('The batch process has encountered a problem.'),
    );

    batch_set($batch);
    // Send the user back to the management page when finished
    batch_process('admin/config/playbox/battle-management'); 
  } else {
    drupal_set_message(t('Sorry, there are no published battles to reset!'));
  } 
}

/**
 * Batch process function to reset and randomize vote values for
 * every published battle 
 */
function batch_battle_reset_process($nids, &$context) {  
  if (!isset($context['sandbox']['progress'])) {  
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] =  count($nids);
  }
  
  $limit = PLAYBOX_ADMIN_BATCH_LIMIT;
  $nid_slice = array_slice($nids, $context['sandbox']['progress'], $limit);  
    
  foreach ($nid_slice as $nid) {  
    // use entity_metadata_wrapper to access & update each battle node
    $node = node_load($nid, NULL, TRUE);
    $wrapper  = entity_metadata_wrapper('node', $node);
    
    // reset completed to 0      
    $wrapper->field_playbox_battle_completed->set(0);
    // set robot and president vote numbers to random < win
    $max_votes = $wrapper->field_playbox_votes_to_win->value() - 1;      
    $wrapper->field_playbox_president_votes->set(rand(0, $max_votes));
    $wrapper->field_playbox_robot_votes->set(rand(0, $max_votes));
    // blank the winner/loser fields
    $wrapper->field_playbox_winner->set(NULL);
    $wrapper->field_playbox_loser->set(NULL);
    
    // Add a new revision for clarity and safety
    $wrapper->revision->set(1);
     
    $wrapper->save();
    
    // Store some result for post-processing in the finished callback.
    $context['results'][] = check_plain($node->title);

    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $node->nid;
    $context['message'] = t('Now processing %node', array('%node' => $node->title));      
  }  
  
  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }  
}

/**
 * Handle completion of batch process
 */ 
function batch_battle_reset_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('%results processed.', array('%results' => count($results))));
  }
  else {
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE))), 'error');
  }
}


/**
 * Helper function to generate markup for displaying related
 * battle admin links - basically taken from playbox_battles_dashboard
 */ 
function _playbox_battles_links() {
  $links_markup = '';
  $base_path = base_path();

  //Create new battles
  if(user_access('create playbox_battle content')){
    $links_markup .= '<h3><a href="'.$base_path.'node/add/playbox-battle" class="btn-link">Create new battles</a></h3>';
  }
 
  //Change site-wide configuration
  if(user_access('change user playbox settings')){
    $links_markup .= '<h3><a href="'.$base_path.'admin/config/playbox/user-settings" class="btn-link">Change user settings</a></h3>';
  }  
  
  return $links_markup;
}  

/**
 * Helper function to generate markup for displaying list of all
 * published battles
 */ 
function _playbox_battles_list() {
  $battles_markup = '';
  
  // Render view table of "my battles" - only relevant if user 
  // is allowed to create content
  if(user_access('create playbox_battle content')){
    $my_battles = views_get_view('playbox_battles');
    $my_battles->set_display('my_battles');  
    $battles_markup .= '<h2>'.$my_battles->get_title().'</h2>';
    $battles_markup .= $my_battles->preview();
  }
  
  // Render table of all battles
  $all_battles = views_get_view('playbox_battles');
  $all_battles->set_display('all_battles');  
  $battles_markup .= '<h2>'.$all_battles->get_title().'</h2>';  
  $battles_markup .= $all_battles->preview();
  
  return $battles_markup;  
}
